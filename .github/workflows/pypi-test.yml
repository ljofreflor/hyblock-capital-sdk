name: PyPI Installation Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar diariamente a las 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Ejecuci√≥n manual

jobs:
  test-pypi-installation:
    name: Test PyPI Installation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: '1.6.1'
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Test PyPI installation with Poetry
      run: |
        echo "üê≥ Testing PyPI installation with Poetry..."
        
        # Crear directorio temporal fuera del proyecto actual
        mkdir -p /tmp/pypi-test
        cd /tmp/pypi-test
        
        # Crear pyproject.toml manualmente para evitar problemas con poetry init
        cat > pyproject.toml << EOF
        [tool.poetry]
        name = "test-pypi-installation"
        version = "0.1.0"
        description = "Test installation from PyPI"
        authors = ["Test User <test@example.com>"]
        
        [tool.poetry.dependencies]
        python = "^3.9"
        
        [build-system]
        requires = ["poetry-core"]
        build-backend = "poetry.core.masonry.api"
        EOF
        
        # Verificar que pyproject.toml se cre√≥
        ls -la pyproject.toml
        cat pyproject.toml
        
        # Instalar desde PyPI
        poetry add hyblock-capital-sdk
        
        # Verificar instalaci√≥n
        poetry run python -c "import hyblock_capital_sdk; print('‚úÖ Poetry installation successful')"
        poetry run python -c "from hyblock_capital_sdk import ApiClient, Configuration, CatalogApi; print('‚úÖ Core components imported')"
        
        # Limpiar directorio temporal
        cd /
        rm -rf /tmp/pypi-test
        
        echo "‚úÖ PyPI installation test passed!"
    
    - name: Test PyPI installation with pip
      run: |
        echo "üê≥ Testing PyPI installation with pip..."
        
        # Crear entorno virtual
        python -m venv pip-test-env
        source pip-test-env/bin/activate
        
        # Instalar desde PyPI
        pip install hyblock-capital-sdk
        
        # Verificar instalaci√≥n
        python -c "import hyblock_capital_sdk; print('‚úÖ pip installation successful')"
        python -c "from hyblock_capital_sdk import ApiClient, Configuration, CatalogApi; print('‚úÖ Core components imported')"
        
        echo "‚úÖ pip installation test passed!"
    
    - name: Test with Docker (latest version)
      run: |
        echo "üê≥ Testing with Docker (latest PyPI version)..."
        
        # Crear Dockerfile temporal para test
        cat > Dockerfile.pypi-test << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        # Instalar dependencias del sistema
        RUN apt-get update && apt-get install -y \
            build-essential \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Instalar Poetry
        RUN pip install poetry
        RUN poetry config virtualenvs.create false
        
        # Crear pyproject.toml manualmente
        RUN cat > pyproject.toml << 'EOF'
        [tool.poetry]
        name = "test-hyblock-sdk"
        version = "0.1.0"
        description = "Test installation from PyPI"
        authors = ["Test User <test@example.com>"]
        
        [tool.poetry.dependencies]
        python = "^3.9"
        
        [build-system]
        requires = ["poetry-core"]
        build-backend = "poetry.core.masonry.api"
        EOF
        
        # Instalar desde PyPI (siempre la √∫ltima versi√≥n)
        RUN poetry add hyblock-capital-sdk
        
        # Tambi√©n con pip
        RUN pip install hyblock-capital-sdk
        
        # Verificar instalaci√≥n
        RUN python -c "import hyblock_capital_sdk; print('‚úÖ SUCCESS: Library imported successfully from PyPI!')"
        RUN python -c "from hyblock_capital_sdk import ApiClient, Configuration, CatalogApi; print('‚úÖ SUCCESS: Core components imported successfully!')"
        RUN python -c "from hyblock_capital_sdk import ApiClient, Configuration; config = Configuration(); client = ApiClient(config); print('‚úÖ SUCCESS: API client created successfully!')"
        
        # Ejecutar test final
        CMD ["python", "-c", "import hyblock_capital_sdk; print('‚úÖ Docker PyPI test completed successfully!')"]
        EOF
        
        # Construir imagen
        docker build -f Dockerfile.pypi-test -t hyblock-sdk-pypi-test .
        
        # Ejecutar test
        docker run --rm hyblock-sdk-pypi-test
        
        echo "‚úÖ Docker PyPI test passed!"
    
    - name: Check for version updates
      run: |
        echo "üîç Checking for version updates..."
        
        # Obtener versi√≥n actual en PyPI
        CURRENT_VERSION=$(pip index versions hyblock-capital-sdk | grep -oP 'Available versions: \K.*' | head -1)
        echo "Current PyPI version: $CURRENT_VERSION"
        
        # Obtener versi√≥n en pyproject.toml
        PROJECT_VERSION=$(poetry version -s)
        echo "Project version: $PROJECT_VERSION"
        
        # Comparar versiones
        if [ "$CURRENT_VERSION" != "$PROJECT_VERSION" ]; then
          echo "‚ö†Ô∏è Version mismatch detected!"
          echo "PyPI: $CURRENT_VERSION"
          echo "Project: $PROJECT_VERSION"
          echo "Consider updating the project version or publishing a new release."
        else
          echo "‚úÖ Versions match!"
        fi
