name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Regenerar SDK autom√°ticamente cada d√≠a a las 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  lint-and-test:
    name: Lint y Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cargar cach√© de dependencias
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar formato con Black
      run: |
        poetry run black --check tests/ || echo "‚ö†Ô∏è Black formatting issues found (tests only)"
    
    - name: Ejecutar Flake8
      run: |
        poetry run flake8 tests/ || echo "‚ö†Ô∏è Flake8 issues found (tests only)"
    
    - name: Ejecutar MyPy
      run: |
        poetry run mypy hyblock_capital_sdk/ || echo "‚ö†Ô∏è MyPy issues found (non-critical for generated code)"
    
    - name: Ejecutar tests
      run: |
        poetry run pytest tests/ --cov=hyblock_capital_sdk --cov-report=xml --cov-report=term-missing
    
    - name: Subir cobertura a Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  generate-sdk:
    name: Generar SDK desde OpenAPI
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[generate-sdk]')
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configurar Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar acceso a API de Hyblock Capital
      run: |
        curl -f -s https://media.hyblockcapital.com/document/swagger-dev.json > /dev/null
    
    - name: Generar SDK
      run: |
        ./generate_sdk.sh
    
    - name: Verificar cambios
      id: verify-changes
      run: |
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commitear cambios
      if: steps.verify-changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "ü§ñ Actualizaci√≥n autom√°tica del SDK desde OpenAPI [skip ci]"
        git push

  build-and-test:
    name: Build y Test de Distribuci√≥n
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Generar SDK si es necesario
      run: |
        if [ ! -d "hyblock_capital_sdk" ] || [ ! -f "hyblock_capital_sdk/__init__.py" ]; then
          echo "üöÄ Generando SDK..."
          ./generate_sdk.sh
        else
          echo "‚úÖ SDK ya existe"
        fi
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Verificar paquete
      run: |
        poetry run twine check dist/*
    
    - name: Subir artefactos
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  security-scan:
    name: An√°lisis de Seguridad
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Ejecutar Safety (vulnerabilidades)
      run: |
        pip install safety || true
        poetry run safety check || echo "‚ö†Ô∏è Safety check skipped (tool not available)"
    
    - name: Ejecutar Bandit (an√°lisis de seguridad)
      run: |
        pip install bandit || true
        poetry run bandit -r hyblock_capital_sdk/ || echo "‚ö†Ô∏è Bandit check skipped (tool not available)"

  publish-test:
    name: Publicar en Test PyPI
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Generar SDK
      run: |
        ./generate_sdk.sh
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Publicar en Test PyPI
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish --repository testpypi

  publish:
    name: Publicar en PyPI
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-test]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Generar SDK
      run: |
        ./generate_sdk.sh
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Publicar en PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry publish

  documentation:
    name: Generar y Desplegar Documentaci√≥n
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Generar SDK
      run: |
        ./generate_sdk.sh
    
    - name: Generar documentaci√≥n
      run: |
        # TODO: Configurar generaci√≥n de documentaci√≥n
        echo "Documentaci√≥n generada"
    
    - name: Desplegar en GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build
