name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permite ejecuci√≥n manual

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  lint-and-test:
    name: Lint y Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cargar cach√© de dependencias
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar formato con Black
      run: |
        poetry run black --check tests/ || echo "‚ö†Ô∏è Black formatting issues found (tests only)"
    
    - name: Ejecutar Flake8
      run: |
        poetry run flake8 tests/ || echo "‚ö†Ô∏è Flake8 issues found (tests only)"
    
    - name: Ejecutar MyPy
      run: |
        poetry run mypy hyblock_capital_sdk/ || echo "‚ö†Ô∏è MyPy issues found (non-critical for generated code)"
    
    - name: Ejecutar tests
      run: |
        poetry run pytest tests/ --cov=hyblock_capital_sdk --cov-report=xml --cov-report=term-missing
    
    - name: Subir cobertura a Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-pypi-installation:
    name: Test PyPI Installation
    runs-on: ubuntu-latest
    needs: lint-and-test  # Solo despu√©s de que pasen los tests
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Test PyPI installation
      run: |
        echo "üß™ Testing PyPI installation..."
        
        # Crear entorno limpio en directorio temporal
        mkdir -p /tmp/pypi-test
        cd /tmp/pypi-test
        
        python -m venv pypi-test
        source pypi-test/bin/activate
        
        # Instalar desde PyPI
        pip install hyblock-capital-sdk
        
        # Verificar instalaci√≥n
        python -c "import hyblock_capital_sdk; print('‚úÖ PyPI installation successful')"
        python -c "from hyblock_capital_sdk import ApiClient, Configuration, CatalogApi; print('‚úÖ Core components imported')"
        
        # Limpiar directorio temporal
        cd /
        rm -rf /tmp/pypi-test
        
        echo "‚úÖ PyPI installation test passed!"
    
    - name: Check version consistency
      run: |
        echo "üîç Checking version consistency..."
        
        # Obtener versi√≥n actual en PyPI
        PYPI_VERSION=$(pip index versions hyblock-capital-sdk | grep -oP 'Available versions: \K.*' | head -1)
        echo "Current PyPI version: $PYPI_VERSION"
        
        # Obtener versi√≥n en pyproject.toml
        PROJECT_VERSION=$(poetry version -s)
        echo "Project version: $PROJECT_VERSION"
        
        # Comparar versiones
        if [ "$PYPI_VERSION" != "$PROJECT_VERSION" ]; then
          echo "‚ö†Ô∏è Version mismatch detected!"
          echo "PyPI: $PYPI_VERSION"
          echo "Project: $PROJECT_VERSION"
          echo "This is expected during development, but consider publishing a new release."
        else
          echo "‚úÖ Versions match!"
        fi

  generate-sdk:
    name: Generar SDK desde OpenAPI (Manual)
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[generate-sdk]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configurar Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar acceso a API de Hyblock Capital
      run: |
        echo "Verificando disponibilidad de la API de Hyblock Capital..."
        for attempt in {1..3}; do
          echo "Intento $attempt de 3..."
          if curl -f -s --connect-timeout 15 --max-time 30 https://media.hyblockcapital.com/document/swagger-dev.json > /dev/null; then
            echo "‚úÖ API disponible"
            break
          else
            echo "‚ö†Ô∏è Intento $attempt fall√≥"
            if [ $attempt -eq 3 ]; then
              echo "‚ùå API no disponible despu√©s de 3 intentos"
              exit 1
            fi
            sleep 5
          fi
        done
    
    - name: Generar SDK
      run: |
        echo "üöÄ Generando SDK desde especificaci√≥n OpenAPI..."
        ./generate_sdk.sh
    
    - name: Verificar cambios
      id: verify-changes
      run: |
        if git diff --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commitear cambios
      if: steps.verify-changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "ü§ñ Actualizaci√≥n autom√°tica del SDK desde OpenAPI [skip ci]"
        git push

  build-and-test:
    name: Build y Test de Distribuci√≥n
    runs-on: ubuntu-latest
    needs: [lint-and-test, test-pypi-installation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar SDK est√° presente
      run: |
        echo "‚úÖ Verificando que el SDK est√© presente..."
        if [ ! -d "hyblock_capital_sdk" ] || [ ! -f "hyblock_capital_sdk/__init__.py" ]; then
          echo "‚ùå SDK no encontrado. El c√≥digo debe estar ya generado en el repositorio."
          exit 1
        fi
        echo "‚úÖ SDK encontrado y listo para build"
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Verificar paquete
      run: |
        poetry run twine check dist/*
    
    - name: Subir artefactos
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  security-scan:
    name: An√°lisis de Seguridad
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Ejecutar Safety (vulnerabilidades)
      run: |
        pip install safety || true
        poetry run safety check || echo "‚ö†Ô∏è Safety check skipped (tool not available)"
    
    - name: Ejecutar Bandit (an√°lisis de seguridad)
      run: |
        pip install bandit || true
        poetry run bandit -r hyblock_capital_sdk/ || echo "‚ö†Ô∏è Bandit check skipped (tool not available)"

  publish-test:
    name: Publicar en Test PyPI
    runs-on: ubuntu-latest
    needs: [lint-and-test, test-pypi-installation, build-and-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar SDK est√° presente
      run: |
        if [ ! -d "hyblock_capital_sdk" ] || [ ! -f "hyblock_capital_sdk/__init__.py" ]; then
          echo "‚ùå SDK no encontrado en el repositorio"
          exit 1
        fi
        echo "‚úÖ SDK verificado"
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Publicar en Test PyPI
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üöÄ Publicando en TestPyPI..."
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish --repository testpypi --verbose
        echo "‚úÖ Publicaci√≥n exitosa en TestPyPI"
    
    - name: Verificar publicaci√≥n en TestPyPI
      run: |
        echo "üîç Verificando publicaci√≥n en TestPyPI..."
        sleep 30  # Esperar a que TestPyPI actualice
        poetry run pip install --index-url https://test.pypi.org/simple/ hyblock-capital-sdk --no-cache-dir
        poetry run python -c "import hyblock_capital_sdk; print('‚úÖ SDK importado correctamente desde TestPyPI')"
        echo "üéâ Verificaci√≥n exitosa - SDK disponible en TestPyPI"

  publish:
    name: Publicar en PyPI
    runs-on: ubuntu-latest
    needs: [lint-and-test, test-pypi-installation, build-and-test]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar SDK est√° presente
      run: |
        if [ ! -d "hyblock_capital_sdk" ] || [ ! -f "hyblock_capital_sdk/__init__.py" ]; then
          echo "‚ùå SDK no encontrado en el repositorio"
          exit 1
        fi
        echo "‚úÖ SDK verificado"
    
    - name: Construir paquete
      run: |
        poetry build
    
    - name: Verificar versi√≥n no existe en PyPI
      run: |
        VERSION=$(poetry version -s)
        echo "üîç Verificando si la versi√≥n $VERSION ya existe en PyPI..."
        if poetry run pip index versions hyblock-capital-sdk | grep -q "$VERSION"; then
          echo "‚ùå La versi√≥n $VERSION ya existe en PyPI"
          exit 1
        fi
        echo "‚úÖ Versi√≥n $VERSION disponible para publicaci√≥n"
    
    - name: Publicar en PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        echo "üöÄ Publicando en PyPI..."
        poetry publish --verbose
        echo "‚úÖ Publicaci√≥n exitosa en PyPI"
    
    - name: Verificar publicaci√≥n
      run: |
        echo "üîç Verificando publicaci√≥n en PyPI..."
        sleep 30  # Esperar a que PyPI actualice
        poetry run pip install hyblock-capital-sdk --no-cache-dir
        poetry run python -c "import hyblock_capital_sdk; print('‚úÖ SDK importado correctamente desde PyPI')"
        echo "üéâ Verificaci√≥n exitosa - SDK disponible en PyPI"

  documentation:
    name: Generar y Desplegar Documentaci√≥n
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para gh-pages
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Instalar Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Instalar dependencias
      run: |
        poetry install --with dev
    
    - name: Verificar SDK est√° presente
      run: |
        if [ ! -d "hyblock_capital_sdk" ] || [ ! -f "hyblock_capital_sdk/__init__.py" ]; then
          echo "‚ùå SDK no encontrado en el repositorio"
          exit 1
        fi
        echo "‚úÖ SDK verificado"
    
    - name: Generar documentaci√≥n
      run: |
        echo "üìö Generando documentaci√≥n con MkDocs..."
        poetry run mkdocs build
        echo "‚úÖ Documentaci√≥n generada en site/"
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
