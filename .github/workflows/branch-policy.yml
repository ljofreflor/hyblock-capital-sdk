name: Branch Policy

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  create:
    ref_type: branch

jobs:
  enforce-branch-policy:
    name: Enforce Branch Policy
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'create'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR policies
        if: github.event_name == 'pull_request'
        env:
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          echo "üîç Validando pol√≠tica de ramas..."
          echo "Base: $BASE_REF | Head: $HEAD_REF"
          
          # Validar PR a main solo desde develop
          if [ "$BASE_REF" = "main" ] && [ "$HEAD_REF" != "develop" ]; then
            echo "‚ùå [POLICY VIOLATION] Solo se permiten PRs a main desde la rama 'develop'."
            echo "‚ùå Rama origen: $HEAD_REF (debe ser 'develop')"
            echo "‚ùå Rama destino: $BASE_REF"
            exit 1
          fi
          
          # Validar PR a develop solo desde feature/fix branches
          if [ "$BASE_REF" = "develop" ]; then
            if [[ "$HEAD_REF" != feature/* && "$HEAD_REF" != fix/* && "$HEAD_REF" != hotfix/* ]]; then
              echo "‚ùå [POLICY VIOLATION] Solo se permiten PRs a develop desde ramas 'feature/*', 'fix/*' o 'hotfix/*'."
              echo "‚ùå Rama origen: $HEAD_REF (debe ser feature/*, fix/* o hotfix/*)"
              echo "‚ùå Rama destino: $BASE_REF"
              exit 1
            fi
          fi
          
          echo "‚úÖ [POLICY] Regla de ramas cumplida - PR desde $HEAD_REF a $BASE_REF"
      
      - name: Block direct push to main branch only
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "‚ùå [POLICY VIOLATION] Push directo a main no permitido."
          echo "‚ùå Solo se permiten PRs desde develop que pasen los tests unitarios."
          echo "‚ùå Flujo: feature/* ‚Üí develop ‚Üí main"
          echo "‚ùå Usa: git push origin develop y crea un PR"
          exit 1
      
      - name: Setup Python and Poetry
        if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')
        run: |
          echo "üêç Configurando Python y Poetry..."
          
          # Verificar que Python est√© disponible
          python --version || python3 --version
          
          # Instalar Poetry si no est√° disponible
          if ! command -v poetry &> /dev/null; then
            echo "üì¶ Instalando Poetry..."
            curl -sSL https://install.python-poetry.org | python3 -
            export PATH="$HOME/.local/bin:$PATH"
          fi
          
          # Verificar que Poetry est√© disponible
          poetry --version
          
          echo "‚úÖ Python y Poetry configurados correctamente"

      - name: Run unit tests for PR validation
        if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')
        run: |
          echo "üß™ Ejecutando tests unitarios para validar PR..."
          
          # Asegurar que Poetry est√© en el PATH
          export PATH="$HOME/.local/bin:$PATH"
          
          # Instalar dependencias
          poetry install --with dev
          
          # Ejecutar tests unitarios
          echo "üîç Ejecutando tests unitarios..."
          poetry run pytest tests/ -v --tb=short
          
          echo "‚úÖ Tests unitarios pasaron exitosamente"
      
      - name: Validate PR requirements
        if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')
        run: |
          echo "üìã Validando requisitos del PR..."
          
          # Verificar que el PR tenga descripci√≥n
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "‚ö†Ô∏è  Advertencia: El PR no tiene descripci√≥n"
          else
            echo "‚úÖ PR tiene descripci√≥n"
          fi
          
          # Verificar que no sea un draft
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "‚ùå [POLICY] No se permiten PRs en draft a ramas protegidas"
            exit 1
          fi
          
          echo "‚úÖ PR cumple con los requisitos b√°sicos"
      
      - name: Validate branch creation policy
        if: github.event_name == 'create' && github.event.ref_type == 'branch'
        env:
          NEW_BRANCH: ${{ github.event.ref }}
        run: |
          echo "üîç Validando pol√≠tica de creaci√≥n de ramas..."
          echo "Nueva rama: $NEW_BRANCH"
          
          # Verificar que no se creen ramas desde main
          if [ "$NEW_BRANCH" != "main" ] && [ "$NEW_BRANCH" != "develop" ]; then
            # Obtener informaci√≥n de la rama base
            BASE_BRANCH=$(git show-ref --heads | grep "$NEW_BRANCH" | head -1 | cut -d' ' -f2 | sed 's|refs/heads/||')
            
            # Verificar si la rama se cre√≥ desde main
            if git merge-base --is-ancestor main "$NEW_BRANCH" 2>/dev/null; then
              if ! git merge-base --is-ancestor develop "$NEW_BRANCH" 2>/dev/null; then
                echo "‚ùå [POLICY VIOLATION] No se permiten ramas creadas desde main."
                echo "‚ùå Rama creada: $NEW_BRANCH"
                echo "‚ùå Todas las ramas deben crearse desde develop."
                echo "‚ùå Usa: git checkout develop && git checkout -b $NEW_BRANCH"
                exit 1
              fi
            fi
          fi
          
          echo "‚úÖ [POLICY] Creaci√≥n de rama cumple con las reglas"


